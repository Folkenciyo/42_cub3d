[THEORY]
	- Map:
		2 dimensional array [][]
	
	- Angle (PoV) of player:
	 * Must stay at 2(pi) to avoid overflow --> Add 2(pi) if negative; substract 2(pi) if overflows that amount
	 * Weird, angle can go to infinity but sin() and cos() functions just handle the angle overflow properly. 
	 	Anyways it would be a good practice to actually calculate whether angles goes beyond 2(pi) or to negative numbers
	
	- Unit vector:
		* Vector from 0,0 to where the player is
		* Every time we move, we have to add or substract to or from that position
			[x0,y0] +- [x1,y1]

[MAKEFILE]

- Put an option to recompile libft when compile the whole project

[RAYCASTING]

	- [DRAWINGS.C] Apply DDA algorithm, right now is a brute force calculation 
	- [DRAWINGS.C] We need to implement and insert the drawing from the POV (maybe make a 3D_drawings.c)
	- [FISH-EYE] Not needed, but it makes the visualization of the blocks way more beautiful
  